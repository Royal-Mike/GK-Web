class MObject {
    public int ID; // định danh duy nhất, phân biệt giữa các đối tượng tại server
    protected Dictionary<string, MAttribute> Attributes = new Dictionary<string, MAttribute>(); // tự điển các thuộc tính, khóa là tên

    // Constructor cho MObject
    public MObject(int id) {
        ID = id;
    }

    // Get và set giá trị một thuộc tính
    public string this[string sAttributeName] {
        get {
            // Kiểm tra xem thuộc tính có tồn tại hay không
            if (Attributes.ContainsKey(sAttributeName)) {
                return Attributes[sAttributeName].Value;
            }
            // Nếu không tồn tại, trả về chuỗi rỗng
            return "";
        }
        set {
            // Kiểm tra xem thuộc tính có tồn tại hay không
            if (Attributes.ContainsKey(sAttributeName)) {
                // Nếu tồn tại và giá trị khác với giá trị hiện tại thì cập nhật giá trị
                if (Attributes[sAttributeName].Value != value) {
                    Attributes[sAttributeName].Value = value;
                }
            } else {
                // Nếu thuộc tính chưa tồn tại, thêm mới với thời gian cache mặc định
                Attributes[sAttributeName] = new MAttribute(sAttributeName, value, MAttribute.DefaultCachedTime);
            }
        }
    }
}

class MAttribute {
    public string Name; // tên thuộc tính
    public string Value; // giá trị thuộc tính
    public int CachedTime; // thời gian (giây) cho phép cache giá trị thuộc tính

    // Thời gian (giây) mặc định cho phép cache giá trị thuộc tính
    public static int DefaultCachedTime = 60;

    // Constructor cho MAttribute
    public MAttribute(string name, string value, int cachedTime) {
        Name = name;
        Value = value;
        CachedTime = cachedTime;
    }
}


class MObjectManager {
    // Tự điển các đối tượng bản gốc tại server, khóa là ID của đối tượng
    public static Dictionary<int, MObject> objects = new Dictionary<int, MObject>();

    // Đăng ký một đối tượng MObject vào từ điển tại server
    public static void Register(MObject mObject) {
        objects[mObject.ID] = mObject;
    }

    // Tìm theo ID và trả về đối tượng MObject trong từ điển, trả về null nếu không có
    private static MObject FindObjectByID(int id) {
        if (objects.ContainsKey(id)) {
            return objects[id];
        }
        return null;
    }

    // Tạo ra đối tượng MObject và trả về ID (giả định rằng ID được tạo tự động)
    public static int CreateObject() {
        int newID = objects.Count > 0 ? objects.Keys.Max() + 1 : 1;
        MObject newObject = new MObject(newID);
        Register(newObject);
        return newID;
    }

    // Cập nhật thuộc tính có tên là sAttributeName của đối tượng có định danh là id
    public static bool SetObjectAttributeValue(int id, string sAttributeName, string newValue) {
        MObject obj = FindObjectByID(id);
        if (obj != null) {
            obj[sAttributeName] = newValue;
            return true;
        }
        return false;
    }

    // Lấy giá trị thuộc tính tên sAttributeName trong đối tượng có định danh là id
    public static string GetObjectAttributeValue(int id, string sAttributeName) {
        MObject obj = FindObjectByID(id);
        if (obj != null) {
            return obj[sAttributeName];
        }
        return "";
    }

    // Lấy thời gian cho phép cache giá trị của thuộc tính tên sAttributeName trong đối tượng có định danh là id
    public static int GetObjectAttributeCachedTime(int id, string sAttributeName) {
        MObject obj = FindObjectByID(id);
        if (obj != null && obj.Attributes.ContainsKey(sAttributeName)) {
            return obj.Attributes[sAttributeName].CachedTime;
        }
        return -1; // Hoặc một giá trị đặc biệt để chỉ ra rằng thuộc tính không tồn tại
    }
}

public class RAttribute {
    public string Name; // tên thuộc tính
    private string LastKnownValue; // giá trị gần đây nhất của thuộc tính
    public int CachedTime; // thời gian (giây) cho phép cache giá trị thuộc tính
    public DateTime LastUpdate; // thời điểm lấy giá trị mới nhất từ server
    public static int DefaultCachedTime = 60; // thời gian cache tối đa mặc định

    // Constructor cho RAttribute
    public RAttribute(string name, string value, int cachedTime) {
        Name = name;
        LastKnownValue = value;
        CachedTime = cachedTime;
        LastUpdate = DateTime.Now;
    }

    // Property Value để lấy giá trị và cập nhật giá trị LastKnownValue
    public string Value {
        get {
            return LastKnownValue;
        }
        set {
            LastKnownValue = value;
            LastUpdate = DateTime.Now;
        }
    }

    // Kiểm tra xem có cần lấy giá trị mới từ server không
    public bool NeedToRefresh() {
        return (DateTime.Now - LastUpdate).TotalSeconds > CachedTime;
    }
}
	

class RObject {
    protected int ID; // định danh của đối tượng bản gốc MObject tại server
    protected Dictionary<string, RAttribute> Attributes = new Dictionary<string, RAttribute>(); // tự điển các thuộc tính được cache

    // Truy cập (get và set) giá trị thuộc tính với tên cho trước
    public string this[string strAttributeName] {
        get {
            // Kiểm tra xem thuộc tính có tồn tại trong từ điển Attributes hay không
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                // Nếu cần làm mới giá trị từ server
                if (attr.NeedToRefresh()) {
                    string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                    attr.Value = newValue;
                }
                return attr.Value;
            } else {
                // Nếu thuộc tính không tồn tại, lấy giá trị từ server và thêm mới thuộc tính
                string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                int cachedTime = RObjectManager.GetObjectAttributeCachedTime(ID, strAttributeName);
                AddNewAttribute(strAttributeName, newValue, cachedTime);
                return newValue;
            }
        }
        set {
            // Kiểm tra xem thuộc tính có tồn tại trong từ điển Attributes hay không
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                // Nếu giá trị hiện tại khác với giá trị cần cập nhật
                if (attr.Value != value) {
                    attr.Value = value;
                    // Cập nhật giá trị thuộc tính của bản gốc tại server
                    RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
                }
            } else {
                // Nếu thuộc tính không tồn tại, thêm mới thuộc tính
                AddNewAttribute(strAttributeName, value, RAttribute.DefaultCachedTime);
                // Cập nhật giá trị thuộc tính của bản gốc tại server
                RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
            }
        }
    }

    // Bổ sung một thuộc tính mới vào từ điển
    private void AddNewAttribute(string strAttributeName, string value, int cachedTime) {
        Attributes[strAttributeName] = new RAttribute(strAttributeName, value, cachedTime);
    }
}

Để quản lý tất cả các đối tượng RObject được tạo ra tại mỗi client và cho phép xóa toàn bộ giá trị cache của tất cả các đối tượng RObject tại client này, chúng ta sẽ bổ sung các thành phần sau vào lớp RObjectManager:

Danh sách quản lý các đối tượng RObject: Sử dụng một từ điển để lưu trữ các đối tượng RObject được tạo ra tại client.
Phương thức để thêm đối tượng RObject vào danh sách quản lý: Khi tạo hoặc liên kết một đối tượng RObject, chúng ta sẽ thêm nó vào danh sách quản lý.
Phương thức để xóa toàn bộ giá trị cache của tất cả các đối tượng RObject: Duyệt qua danh sách các đối tượng RObject và xóa toàn bộ giá trị cache của chúng.
class RObject {
    protected int ID; // định danh của đối tượng bản gốc MObject tại server
    protected Dictionary<string, RAttribute> Attributes = new Dictionary<string, RAttribute>(); // tự điển các thuộc tính được cache

    // Truy cập (get và set) giá trị thuộc tính với tên cho trước
    public string this[string strAttributeName] {
        get {
            // Kiểm tra xem thuộc tính có tồn tại trong từ điển Attributes hay không
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                // Nếu cần làm mới giá trị từ server
                if (attr.NeedToRefresh()) {
                    string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                    attr.Value = newValue;
                }
                return attr.Value;
            } else {
                // Nếu thuộc tính không tồn tại, lấy giá trị từ server và thêm mới thuộc tính
                string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                int cachedTime = RObjectManager.GetObjectAttributeCachedTime(ID, strAttributeName);
                AddNewAttribute(strAttributeName, newValue, cachedTime);
                return newValue;
            }
        }
        set {
            // Kiểm tra xem thuộc tính có tồn tại trong từ điển Attributes hay không
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                // Nếu giá trị hiện tại khác với giá trị cần cập nhật
                if (attr.Value != value) {
                    attr.Value = value;
                    // Cập nhật giá trị thuộc tính của bản gốc tại server
                    RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
                }
            } else {
                // Nếu thuộc tính không tồn tại, thêm mới thuộc tính
                AddNewAttribute(strAttributeName, value, RAttribute.DefaultCachedTime);
                // Cập nhật giá trị thuộc tính của bản gốc tại server
                RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
            }
        }
    }

    // Bổ sung một thuộc tính mới vào từ điển
    private void AddNewAttribute(string strAttributeName, string value, int cachedTime) {
        Attributes[strAttributeName] = new RAttribute(strAttributeName, value, cachedTime);
    }

    // Xóa toàn bộ giá trị cache của đối tượng RObject
    public void ClearCache() {
        foreach (var attr in Attributes.Values) {
            attr.Value = string.Empty; // Hoặc bất kỳ giá trị mặc định nào bạn muốn sử dụng
        }
    }
}

class RObjectManager {
    // Từ điển quản lý tất cả các đối tượng RObject được tạo ra tại client
    private static Dictionary<int, List<RObject>> RObjects = new Dictionary<int, List<RObject>>();

    // Tạo ra đối tượng tại server và trả về ID
    public static int CreateObject() {
        int id = MObjectManager.CreateObject();
        // Tạo đối tượng RObject mới và thêm vào danh sách quản lý
        RObject rObject = new RObject(id);
        if (!RObjects.ContainsKey(id)) {
            RObjects[id] = new List<RObject>();
        }
        RObjects[id].Add(rObject);
        return id;
    }

    // Lấy giá trị của thuộc tính tên strAttributeName của đối tượng có định danh id
    public static string GetObjectAttributeValue(int id, string strAttributeName) {
        return MObjectManager.GetObjectAttributeValue(id, strAttributeName);
    }

    // Lấy thời gian cho phép cache giá trị thuộc tính tên strAttributeName của đối tượng có định danh id
    public static int GetObjectAttributeCachedTime(int id, string strAttributeName) {
        return MObjectManager.GetObjectAttributeCachedTime(id, strAttributeName);
    }

    // Cập nhật giá trị thuộc tính tên strAttributeName của đối tượng có định danh id
    public static bool SetObjectAttributeValue(int id, string strAttributeName, string newValue) {
        return MObjectManager.SetObjectAttributeValue(id, strAttributeName, newValue);
    }

    // Thêm đối tượng RObject vào danh sách quản lý
    public static void AddRObject(RObject rObject) {
        int id = rObject.ID;
        if (!RObjects.ContainsKey(id)) {
            RObjects[id] = new List<RObject>();
        }
        RObjects[id].Add(rObject);
    }

    // Xóa toàn bộ giá trị cache của tất cả các đối tượng RObject tại client
    public static void ClearAllCaches() {
        foreach (var rObjectList in RObjects.Values) {
            foreach (var rObject in rObjectList) {
                rObject.ClearCache();
            }
        }
    }
}

Để giải quyết vấn đề này, chúng ta cần một cơ chế thông báo (notification mechanism) giữa server và client. Một trong những cách tiếp cận phổ biến là sử dụng các mẫu thiết kế như Observer Pattern hoặc Publisher-Subscriber Pattern. Trong bài này, chúng ta sẽ sử dụng Publisher-Subscriber Pattern để thực hiện việc này.

Giải pháp tổng thể
Server sẽ đóng vai trò là Publisher: Khi giá trị của một thuộc tính MAttribute thay đổi, nó sẽ thông báo (publish) sự thay đổi này.
Clients sẽ đóng vai trò là Subscribers: Các đối tượng RObject tại client sẽ đăng ký (subscribe) để nhận thông báo từ server về các thay đổi của các thuộc tính mà chúng đang cache.
Notification System: Xây dựng một hệ thống thông báo để quản lý các đăng ký và gửi thông báo khi có sự thay đổi.

using System;
using System.Collections.Generic;

public static class NotificationSystem {
    private static Dictionary<string, List<Action<string>>> subscribers = new Dictionary<string, List<Action<string>>>();

    // Đăng ký subscriber
    public static void Subscribe(string attributeKey, Action<string> callback) {
        if (!subscribers.ContainsKey(attributeKey)) {
            subscribers[attributeKey] = new List<Action<string>>();
        }
        subscribers[attributeKey].Add(callback);
    }

    // Hủy đăng ký subscriber
    public static void Unsubscribe(string attributeKey, Action<string> callback) {
        if (subscribers.ContainsKey(attributeKey)) {
            subscribers[attributeKey].Remove(callback);
        }
    }

    // Thông báo tất cả subscribers về sự thay đổi
    public static void Notify(string attributeKey, string newValue) {
        if (subscribers.ContainsKey(attributeKey)) {
            foreach (var callback in subscribers[attributeKey]) {
                callback(newValue);
            }
        }
    }
}

class MObjectManager {
    // Các phương thức và thuộc tính khác...

    public static bool SetObjectAttributeValue(int id, string sAttributeName, string newValue) {
        MObject mObject = FindObjectByID(id);
        if (mObject == null) return false;
        
        if (mObject.Attributes.ContainsKey(sAttributeName)) {
            MAttribute attribute = mObject.Attributes[sAttributeName];
            if (attribute.Value != newValue) {
                attribute.Value = newValue;
                // Thông báo sự thay đổi
                NotificationSystem.Notify($"{id}:{sAttributeName}", newValue);
            }
            return true;
        }
        return false;
    }
}

class RObject {
    protected int ID; // định danh của đối tượng bản gốc MObject tại server
    protected Dictionary<string, RAttribute> Attributes = new Dictionary<string, RAttribute>(); // tự điển các thuộc tính được cache

    public RObject(int id) {
        ID = id;
    }

    // Truy cập (get và set) giá trị thuộc tính với tên cho trước
    public string this[string strAttributeName] {
        get {
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                if (attr.NeedToRefresh()) {
                    string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                    attr.Value = newValue;
                }
                return attr.Value;
            } else {
                string newValue = RObjectManager.GetObjectAttributeValue(ID, strAttributeName);
                int cachedTime = RObjectManager.GetObjectAttributeCachedTime(ID, strAttributeName);
                AddNewAttribute(strAttributeName, newValue, cachedTime);
                return newValue;
            }
        }
        set {
            if (Attributes.ContainsKey(strAttributeName)) {
                RAttribute attr = Attributes[strAttributeName];
                if (attr.Value != value) {
                    attr.Value = value;
                    RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
                }
            } else {
                AddNewAttribute(strAttributeName, value, RAttribute.DefaultCachedTime);
                RObjectManager.SetObjectAttributeValue(ID, strAttributeName, value);
            }
        }
    }

    private void AddNewAttribute(string strAttributeName, string value, int cachedTime) {
        var rAttribute = new RAttribute(strAttributeName, value, cachedTime);
        Attributes[strAttributeName] = rAttribute;
        // Đăng ký để nhận thông báo từ server
        NotificationSystem.Subscribe($"{ID}:{strAttributeName}", newValue => {
            rAttribute.Value = newValue;
        });
    }

    // Xóa toàn bộ giá trị cache của đối tượng RObject
    public void ClearCache() {
        foreach (var attr in Attributes.Values) {
            attr.Value = string.Empty;
        }
    }
}

class RObjectManager {
    private static Dictionary<int, List<RObject>> RObjects = new Dictionary<int, List<RObject>>();

    public static int CreateObject() {
        int id = MObjectManager.CreateObject();
        RObject rObject = new RObject(id);
        if (!RObjects.ContainsKey(id)) {
            RObjects[id] = new List<RObject>();
        }
        RObjects[id].Add(rObject);
        return id;
    }

    public static string GetObjectAttributeValue(int id, string strAttributeName) {
        return MObjectManager.GetObjectAttributeValue(id, strAttributeName);
    }

    public static int GetObjectAttributeCachedTime(int id, string strAttributeName) {
        return MObjectManager.GetObjectAttributeCachedTime(id, strAttributeName);
    }

    public static bool SetObjectAttributeValue(int id, string strAttributeName, string newValue) {
        return MObjectManager.SetObjectAttributeValue(id, strAttributeName, newValue);
    }

    public static void AddRObject(RObject rObject) {
        int id = rObject.ID;
        if (!RObjects.ContainsKey(id)) {
            RObjects[id] = new List<RObject>();
        }
        RObjects[id].Add(rObject);
    }

    public static void ClearAllCaches() {
        foreach (var rObjectList in RObjects.Values) {
            foreach (var rObject in rObjectList) {
                rObject.ClearCache();
            }
        }
    }
}
